<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Esprima</name>
    </assembly>
    <members>
        <member name="M:Esprima.ArrayList`1.#ctor(`0[])">
            <remarks>
            Expects ownership of the array!
            </remarks>
        </member>
        <member name="M:Esprima.ArrayList`1.AsSpan">
            <remarks>
            Items should not be added or removed from the <see cref="T:Esprima.ArrayList`1"/> while the returned <see cref="T:System.Span`1"/> is in use!
            </remarks>
        </member>
        <member name="M:Esprima.ArrayList`1.AsReadOnlySpan">
            <remarks>
            Items should not be added or removed from the <see cref="T:Esprima.ArrayList`1"/> while the returned <see cref="T:System.ReadOnlySpan`1"/> is in use!
            </remarks>
        </member>
        <member name="T:Esprima.ArrayList`1.Enumerator">
            <remarks>
            This implementation does not detect changes to the list
            during iteration and therefore the behaviour is undefined
            under those conditions.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ArrayExpression.Elements">
            <summary>
            { <see cref="T:Esprima.Ast.Expression"/> (incl. <see cref="T:Esprima.Ast.SpreadElement"/>) | <see langword="null"/> (omitted element) }
            </summary>
        </member>
        <member name="P:Esprima.Ast.ArrayPattern.Elements">
            <summary>
            { <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> (in assignment contexts only) | <see cref="T:Esprima.Ast.BindingPattern"/> | <see cref="T:Esprima.Ast.AssignmentPattern"/> | <see cref="T:Esprima.Ast.RestElement"/> | <see langword="null"/> (omitted element) }
            </summary>
        </member>
        <member name="P:Esprima.Ast.ArrowFunctionExpression.Params">
            <summary>
            { <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.BindingPattern"/> | <see cref="T:Esprima.Ast.AssignmentPattern"/> | <see cref="T:Esprima.Ast.RestElement"/> }
            </summary>
        </member>
        <member name="P:Esprima.Ast.ArrowFunctionExpression.Body">
            <remarks>
            <see cref="T:Esprima.Ast.BlockStatement"/> | <see cref="T:Esprima.Ast.Expression"/>
            </remarks>
        </member>
        <member name="T:Esprima.Ast.ArrowParameterPlaceHolder">
            <remarks>
            <see cref="T:Esprima.Ast.ArrowParameterPlaceHolder"/> nodes never appear in the final AST, only used during its construction.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.AssignmentExpression.Left">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> | <see cref="T:Esprima.Ast.BindingPattern"/> 
            </remarks>
        </member>
        <member name="P:Esprima.Ast.AssignmentPattern.Left">
            <summary>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> (in assignment contexts only) | <see cref="T:Esprima.Ast.BindingPattern"/>
            </summary>
        </member>
        <member name="P:Esprima.Ast.CatchClause.Param">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.BindingPattern"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ChainExpression.Expression">
            <remarks>
            <see cref="T:Esprima.Ast.CallExpression"/> | <see cref="T:Esprima.Ast.ComputedMemberExpression"/>| <see cref="T:Esprima.Ast.StaticMemberExpression"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ClassBody.Body">
            <remarks>
            <see cref="T:Esprima.Ast.MethodDefinition"/> | <see cref="T:Esprima.Ast.PropertyDefinition"/> | <see cref="T:Esprima.Ast.StaticBlock"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ClassProperty.Key">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string or numeric) | '[' <see cref="T:Esprima.Ast.Expression"/> ']' | <see cref="T:Esprima.Ast.PrivateIdentifier"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ExportAllDeclaration.Exported">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string)
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ExportDefaultDeclaration.Declaration">
            <remarks>
            <see cref="T:Esprima.Ast.Expression"/> | <see cref="T:Esprima.Ast.ClassDeclaration"/> | <see cref="T:Esprima.Ast.FunctionDeclaration"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ExportNamedDeclaration.Declaration">
            <remarks>
            <see cref="T:Esprima.Ast.VariableDeclaration"/> | <see cref="T:Esprima.Ast.ClassDeclaration"/> | <see cref="T:Esprima.Ast.FunctionDeclaration"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ExportSpecifier.Local">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string)
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ExportSpecifier.Exported">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string)
            </remarks>
        </member>
        <member name="T:Esprima.Ast.Expression">
            <summary>
            A JavaScript expression. 
            </summary>
        </member>
        <member name="P:Esprima.Ast.Expression.Tokens">
            <summary>
            Gets or sets the list of tokens associated with the AST represented by this node.
            This property is automatically set by <see cref="M:Esprima.JavaScriptParser.ParseExpression(System.String,System.Boolean)"/> when <see cref="P:Esprima.ParserOptions.Tokens"/> is set to <see langword="true"/>.
            </summary>
            <remarks>
            The operation is not guaranteed to be thread-safe. In case concurrent access or update is possible, the necessary synchronization is caller's responsibility.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.Expression.Comments">
            <summary>
            Gets or sets the list of comments associated with the AST represented by this node.
            This property is automatically set by <see cref="M:Esprima.JavaScriptParser.ParseExpression(System.String,System.Boolean)"/> when <see cref="P:Esprima.ParserOptions.Comments"/> is set to <see langword="true"/>.
            </summary>
            <remarks>
            The operation is not guaranteed to be thread-safe. In case concurrent access or update is possible, the necessary synchronization is caller's responsibility.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ForInStatement.Left">
            <remarks>
            <see cref="T:Esprima.Ast.VariableDeclaration"/> (may have an initializer in non-strict mode) | <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> | <see cref="T:Esprima.Ast.BindingPattern"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ForOfStatement.Left">
            <remarks>
            <see cref="T:Esprima.Ast.VariableDeclaration"/> (cannot have an initializer) | <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> | <see cref="T:Esprima.Ast.BindingPattern"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ForStatement.Init">
            <remarks>
            <see cref="T:Esprima.Ast.VariableDeclaration"/> (var i) | <see cref="T:Esprima.Ast.Expression"/> (i=0)
            </remarks>
        </member>
        <member name="P:Esprima.Ast.FunctionDeclaration.Params">
            <summary>
            { <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.BindingPattern"/> | <see cref="T:Esprima.Ast.AssignmentPattern"/> | <see cref="T:Esprima.Ast.RestElement"/> }
            </summary>
        </member>
        <member name="P:Esprima.Ast.FunctionExpression.Params">
            <summary>
            { <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.BindingPattern"/> | <see cref="T:Esprima.Ast.AssignmentPattern"/> | <see cref="T:Esprima.Ast.RestElement"/> }
            </summary>
        </member>
        <member name="T:Esprima.Ast.IClass">
            <summary>
            Represents either a <see cref="T:Esprima.Ast.ClassDeclaration"/> or an <see cref="T:Esprima.Ast.ClassExpression"/>
            </summary>
        </member>
        <member name="T:Esprima.Ast.IFunction">
            <summary>
            Represents either a <see cref="T:Esprima.Ast.FunctionDeclaration"/>, a <see cref="T:Esprima.Ast.FunctionExpression"/> or an <see cref="T:Esprima.Ast.ArrowFunctionExpression"/>
            </summary>
        </member>
        <member name="T:Esprima.Ast.IModuleSpecifier">
            <summary>
            Represents either an <see cref="T:Esprima.Ast.ExportSpecifier"/> or an <see cref="T:Esprima.Ast.ImportDeclarationSpecifier"/>
            </summary>
        </member>
        <member name="P:Esprima.Ast.ImportAttribute.Key">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string or numeric)
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ImportSpecifier.Imported">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string)
            </remarks>
        </member>
        <member name="T:Esprima.Ast.Jsx.JsxExpression">
            <summary>
            A Jsx expression.
            </summary>
        </member>
        <member name="P:Esprima.Ast.MemberExpression.Computed">
            <summary>
            True if an indexer is used and the property to be evaluated.
            </summary>
        </member>
        <member name="M:Esprima.Ast.Node.GetChildNodes">
            <remarks>
            Inheritors who extend the AST with custom node types should override this method and provide an actual implementation.
            </remarks>
        </member>
        <member name="M:Esprima.Ast.Node.AcceptAsExtension(Esprima.Utils.AstVisitor)">
            <summary>
            Dispatches the visitation of the current node to <see cref="M:Esprima.Utils.AstVisitor.VisitExtension(Esprima.Ast.Node)"/>.
            </summary>
            <remarks>
            When defining custom node types, inheritors can use this method to implement the abstract <see cref="M:Esprima.Ast.Node.Accept(Esprima.Utils.AstVisitor)"/> method.
            </remarks>
        </member>
        <member name="M:Esprima.Ast.NodeList`1.#ctor(`0[],System.Int32)">
            <remarks>
            Expects ownership of the array!
            </remarks>
        </member>
        <member name="T:Esprima.Ast.NodeList`1.Enumerator">
            <remarks>
            This implementation does not detect changes to the list
            during iteration and therefore the behaviour is undefined
            under those conditions.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.ObjectExpression.Properties">
            <summary>
            { <see cref="T:Esprima.Ast.Property"/> | <see cref="T:Esprima.Ast.SpreadElement"/> }
            </summary>
        </member>
        <member name="P:Esprima.Ast.ObjectPattern.Properties">
            <summary>
            { <see cref="T:Esprima.Ast.Property"/> | <see cref="T:Esprima.Ast.RestElement"/> }
            </summary>
        </member>
        <member name="P:Esprima.Ast.Program.Tokens">
            <summary>
            Gets or sets the list of tokens associated with the AST represented by this node.
            This property is automatically set by <see cref="M:Esprima.JavaScriptParser.ParseScript(System.String,System.String,System.Boolean)"/> and <see cref="M:Esprima.JavaScriptParser.ParseModule(System.String,System.String)"/> when <see cref="P:Esprima.ParserOptions.Tokens"/> is set to <see langword="true"/>.
            </summary>
            <remarks>
            The operation is not guaranteed to be thread-safe. In case concurrent access or update is possible, the necessary synchronization is caller's responsibility.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.Program.Comments">
            <summary>
            Gets or sets the list of comments associated with the AST represented by this node.
            This property is automatically set by <see cref="M:Esprima.JavaScriptParser.ParseScript(System.String,System.String,System.Boolean)"/> and <see cref="M:Esprima.JavaScriptParser.ParseModule(System.String,System.String)"/> when <see cref="P:Esprima.ParserOptions.Comments"/> is set to <see langword="true"/>.
            </summary>
            <remarks>
            The operation is not guaranteed to be thread-safe. In case concurrent access or update is possible, the necessary synchronization is caller's responsibility.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.Property.Key">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.Literal"/> (string or numeric) | '[' <see cref="T:Esprima.Ast.Expression"/> ']'
            </remarks>
        </member>
        <member name="P:Esprima.Ast.Property.Value">
            <remarks>
            When property of an object literal: <see cref="T:Esprima.Ast.Expression"/> (incl. <see cref="T:Esprima.Ast.SpreadElement"/> and <see cref="T:Esprima.Ast.FunctionExpression"/> for getters/setters/methods) <br />
            When property of an object binding pattern: <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> (in assignment contexts only) | <see cref="T:Esprima.Ast.BindingPattern"/> | <see cref="T:Esprima.Ast.AssignmentPattern"/> | <see cref="T:Esprima.Ast.RestElement"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.RestElement.Argument">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.MemberExpression"/> (in assignment contexts only) | <see cref="T:Esprima.Ast.BindingPattern"/>
            </remarks>
        </member>
        <member name="P:Esprima.Ast.SyntaxElement.AssociatedData">
            <summary>
            Gets or sets the arbitrary, user-defined data object associated with the current <see cref="T:Esprima.Ast.SyntaxElement"/>.
            </summary>
            <remarks>
            The operation is not guaranteed to be thread-safe. In case concurrent access or update is possible, the necessary synchronization is caller's responsibility.
            </remarks>
        </member>
        <member name="P:Esprima.Ast.VariableDeclarator.Id">
            <remarks>
            <see cref="T:Esprima.Ast.Identifier"/> | <see cref="T:Esprima.Ast.BindingPattern"/>
            </remarks>
        </member>
        <member name="T:Esprima.CollectingErrorHandler">
            <summary>
            Error handler that collects errors that have been seen during the parsing.
            </summary>
        </member>
        <member name="T:Esprima.ErrorHandler">
            <summary>
            Default error handling logic for Esprima.
            </summary>
        </member>
        <member name="T:Esprima.EsprimaExceptionHelper">
            <remarks>
            JIT cannot inline methods that have <see langword="throw"/> in them. These helper methods allow us to work around this.
            </remarks>
        </member>
        <member name="T:Esprima.JavaScriptParser">
            <summary>
            Provides JavaScript parsing capabilities.
            </summary>
            <remarks>
            Use the <see cref="M:Esprima.JavaScriptParser.ParseScript(System.String,System.String,System.Boolean)" />, <see cref="M:Esprima.JavaScriptParser.ParseModule(System.String,System.String)" /> or <see cref="M:Esprima.JavaScriptParser.ParseExpression(System.String,System.Boolean)" /> methods to parse the JavaScript code.
            </remarks>
        </member>
        <member name="M:Esprima.JavaScriptParser.#ctor">
            <summary>
            Creates a new <see cref="T:Esprima.JavaScriptParser" /> instance.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.#ctor(Esprima.ParserOptions)">
            <summary>
            Creates a new <see cref="T:Esprima.JavaScriptParser" /> instance.
            </summary>
            <param name="options">The parser options.</param>
            <returns></returns>
        </member>
        <member name="M:Esprima.JavaScriptParser.ParseModule(System.String,System.String)">
            <summary>
            Parses the code as a JavaScript module.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.ParseScript(System.String,System.String,System.Boolean)">
            <summary>
            Parses the code as a JavaScript script.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.GetTokenRaw(Esprima.Token@)">
            <summary>
            From internal representation to an external structure
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.Expect(System.String)">
            <summary>
            Expect the next token to match the specified punctuator.
            If not, an exception will be thrown.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.ExpectCommaSeparator">
            <summary>
            Quietly expect a comma when in tolerant mode, otherwise delegates to Expect().
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.ExpectKeyword(System.String)">
            <summary>
            Expect the next token to match the specified keyword.
            If not, an exception will be thrown.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.Match(System.String)">
            <summary>
            Return true if the next token matches the specified punctuator.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.ConsumeMatch(System.String)">
            <summary>
            Return true if the next token matches the specified punctuator and consumes the next token.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.MatchAny(System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Return true if the next token matches any of the specified punctuators.
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.MatchKeyword(System.String)">
            <summary>
            Return true if the next token matches the specified keyword
            </summary>
        </member>
        <member name="M:Esprima.JavaScriptParser.ParseExpression(System.String,System.Boolean)">
            <summary>
            Parses the code as a JavaScript expression.
            </summary>
        </member>
        <member name="T:Esprima.JsxParser">
            <summary>
            Provides JSX parsing capabilities.
            </summary>
            <remarks>
            Use the <see cref="M:Esprima.JavaScriptParser.ParseScript(System.String,System.String,System.Boolean)" />, <see cref="M:Esprima.JavaScriptParser.ParseModule(System.String,System.String)" /> or
            <see cref="M:Esprima.JavaScriptParser.ParseExpression(System.String,System.Boolean)" /> methods to parse the JSX code.
            </remarks>
        </member>
        <member name="P:Esprima.ParseError.Index">
            <summary>
            Zero-based index within the parsed code string. (Can be negative if location information is available.)
            </summary>
        </member>
        <member name="P:Esprima.ParseError.LineNumber">
            <summary>
            One-based line number. (Can be zero if location information is not available.)
            </summary>
        </member>
        <member name="P:Esprima.ParseError.Column">
            <summary>
            One-based column index.
            </summary>
        </member>
        <member name="P:Esprima.ParserException.Index">
            <summary>
            Zero-based index within the parsed code string. (Can be negative if location information is available.)
            </summary>
        </member>
        <member name="P:Esprima.ParserException.LineNumber">
            <summary>
            One-based line number. (Can be zero if location information is not available.)
            </summary>
        </member>
        <member name="P:Esprima.ParserException.Column">
            <summary>
            One-based column index.
            </summary>
        </member>
        <member name="T:Esprima.ParserOptions">
            <summary>
            Parser options.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.Tokens">
            <summary>
            Gets or sets whether the tokens are included in the parsed tree, defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.Comments">
            <summary>
            Gets or sets whether the comments are included in the parsed tree, defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.Tolerant">
            <summary>
            Gets or sets whether the parser is tolerant to errors, defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.AllowReturnOutsideFunction">
            <summary>
            Gets or sets whether the parser allows return statement to be used outside of functions, defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.ErrorHandler">
            <summary>
            Gets or sets the <see cref="P:Esprima.ParserOptions.ErrorHandler"/> to use, defaults to <see cref="F:Esprima.ErrorHandler.Default"/>.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.RegExpParseMode">
            <summary>
            Gets or sets how regular expressions should be parsed, defaults to <see cref="F:Esprima.RegExpParseMode.AdaptToInterpreted"/>.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.RegexTimeout">
            <summary>
            Default timeout for created <see cref="T:System.Text.RegularExpressions.Regex"/> instances, defaults to 10 seconds.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.MaxAssignmentDepth">
            <summary>
            The maximum depth of assignments allowed, defaults to 200.
            </summary>
        </member>
        <member name="P:Esprima.ParserOptions.OnNodeCreated">
            <summary>
            Action to execute on each parsed node.
            </summary>
            <remarks>
            This callback allows you to make changes to the nodes created by the parser.
            E.g. you can use it to store a reference to the parent node for later use:
            <code>
            options.OnNodeCreated = node =>
            {
                foreach (var child in node.ChildNodes)
                {
                    child.AssociatedData = node;
                }
            };
            </code>
            </remarks>
        </member>
        <member name="T:Esprima.Position">
            <summary>
            Represents a source position as line number and column offset, where
            the first line is 1 and first column is 0.
            </summary>
            <remarks>
            A position where <see cref="F:Esprima.Position.Line"/> and <see cref="F:Esprima.Position.Column"/> are zero
            is an allowed (and the default) value but considered an invalid
            position.
            </remarks>
        </member>
        <member name="M:Esprima.Scanner.ValidateRegExp(System.String,System.String,Esprima.ParseError@)">
            <summary>
            Checks whether an ECMAScript regular expression is syntactically correct.
            </summary>
            <remarks>
            Unicode sets mode (flag v) is not supported currently, for such patterns the method returns <see langword="false"/>.
            Expressions within Unicode property escape sequences (\p{...} and \P{...}) are not validated (ignored) currently.
            </remarks>
            <returns><see langword="true"/> if the regular expression is syntactically correct, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Esprima.Scanner.AdaptRegExp(System.String,System.String,System.Boolean,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Parses an ECMAScript regular expression and tries to construct a <see cref="T:System.Text.RegularExpressions.Regex"/> instance with the equivalent behavior.
            </summary>
            <remarks>
            Please note that, because of some fundamental differences between the ECMAScript and .NET regular expression engines,
            not every ECMAScript regular expression can be converted to an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> (or can be converted with compromises only).
            You can read more about the known issues of the conversion <see href="https://github.com/sebastienros/esprima-dotnet/pull/364#issuecomment-1606045259">here</see>.
            </remarks>
            <returns>
            An instance of <see cref="T:Esprima.RegExpParseResult"/>, whose <see cref="P:Esprima.RegExpParseResult.Regex"/> property contains the equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> if the conversion was possible,
            otherwise <see langword="null"/> (unless <paramref name="throwIfNotAdaptable"/> is <see langword="true"/>).
            </returns>
            <exception cref="T:Esprima.ParserException">
            <paramref name="pattern"/> is an invalid regular expression pattern or cannot be converted
            to an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> (if <paramref name="throwIfNotAdaptable"/> is <see langword="true"/>).
            </exception>
        </member>
        <member name="M:Esprima.Scanner.RegExpParser.CheckBracesBalance(Esprima.ArrayList{Esprima.Scanner.RegExpCapturingGroup}@,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Ensures the braces are balanced in the regular expression pattern.
            </summary>
        </member>
        <member name="M:Esprima.Scanner.RegExpParser.ParsePattern``1(``0,Esprima.ArrayList{Esprima.Scanner.RegExpCapturingGroup}@,System.Collections.Generic.Dictionary{System.String,System.String},Esprima.ParseError@)">
            <summary>
            Check the regular expression pattern for additional syntax errors and optionally build an adjusted pattern which
            implements the equivalent behavior in .NET, on top of the <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript"/> compatibility mode.
            </summary>
            <returns>
            <see langword="null"/> if the scanner is configured to validate the regular expression pattern but not adapt it to .NET.
            Otherwise, the adapted pattern or <see langword="null"/> if the pattern is syntactically correct but a .NET equivalent could not be constructed
            and the scanner is configured to tolerant mode.
            </returns>
        </member>
        <member name="T:Esprima.RegExpParseMode">
            <summary>
            Specifies how the scanner should parse regular expressions.
            </summary>
        </member>
        <member name="F:Esprima.RegExpParseMode.Skip">
            <summary>
            Scan regular expressions without checking that they are syntactically correct.
            </summary>
        </member>
        <member name="F:Esprima.RegExpParseMode.Validate">
            <summary>
            Scan regular expressions and check that they are syntactically correct (throw <see cref="T:Esprima.ParserException"/> if an invalid regular expression is encountered)
            but don't attempt to convert them to an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="F:Esprima.RegExpParseMode.AdaptToInterpreted">
            <summary>
            Scan regular expressions, check that they are syntactically correct (throw <see cref="T:Esprima.ParserException"/> if an invalid regular expression is encountered)
            and attempt to convert them to an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> without the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled"/> option.
            </summary>
            <remarks>
            In the case of a valid regular expression for which an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> cannot be constructed, either <see cref="T:Esprima.ParserException"/> is thrown
            or a <see cref="T:Esprima.Token"/> is created with the <see cref="P:Esprima.Token.Value"/> property set to <see langword="null"/>, depending on the <see cref="P:Esprima.ScannerOptions.Tolerant"/> option.
            </remarks>
        </member>
        <member name="F:Esprima.RegExpParseMode.AdaptToCompiled">
            <summary>
            Scan regular expressions, check that they are syntactically correct (throw <see cref="T:Esprima.ParserException"/> if an invalid regular expression is encountered)
            and attempt to convert them to an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled"/> option.
            </summary>
            <remarks>
            In the case of a valid regular expression for which an equivalent <see cref="T:System.Text.RegularExpressions.Regex"/> cannot be constructed, either <see cref="T:Esprima.ParserException"/> is thrown
            or a <see cref="T:Esprima.Token"/> is created with the <see cref="P:Esprima.Token.Value"/> property set to <see langword="null"/>, depending on the <see cref="P:Esprima.ScannerOptions.Tolerant"/> option.
            </remarks>
        </member>
        <member name="T:Esprima.ScannerOptions">
            <summary>
            Scanner options.
            </summary>
        </member>
        <member name="P:Esprima.ScannerOptions.Comments">
            <summary>
            Gets or sets whether the comments are collected, defaults to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Esprima.ScannerOptions.Tolerant">
            <summary>
            Gets or sets whether the scanner is tolerant to errors, defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Esprima.ScannerOptions.ErrorHandler">
            <summary>
            Gets or sets the <see cref="P:Esprima.ScannerOptions.ErrorHandler"/> to use, defaults to <see cref="F:Esprima.ErrorHandler.Default"/>.
            </summary>
        </member>
        <member name="P:Esprima.ScannerOptions.RegExpParseMode">
            <summary>
            Gets or sets how regular expressions should be parsed, defaults to <see cref="F:Esprima.RegExpParseMode.AdaptToInterpreted"/>.
            </summary>
        </member>
        <member name="P:Esprima.ScannerOptions.RegexTimeout">
            <summary>
            Default timeout for created <see cref="T:System.Text.RegularExpressions.Regex"/> instances, defaults to 10 seconds.
            </summary>
        </member>
        <member name="T:Esprima.StringPool">
            <summary>
            A heavily slimmed down version of <see cref="T:System.Collections.Generic.HashSet`1"/> which can be used to reduce memory allocations when dissecting a string.
            </summary>
        </member>
        <member name="M:Esprima.StringPool.Initialize(System.Int32)">
            <summary>
            Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
            greater than or equal to capacity.
            </summary>
        </member>
        <member name="M:Esprima.StringPool.GetBucketRef(System.Int32)">
            <summary>Gets a reference to the specified hashcode's bucket, containing an index into <see cref="F:Esprima.StringPool._entries"/>.</summary>
        </member>
        <member name="M:Esprima.StringPool.GetOrCreate(System.ReadOnlySpan{System.Char})">
            <summary>Adds the specified string to the <see cref="T:Esprima.StringPool"/> object if it's not already contained.</summary>
            <param name="value">The string to add.</param>
            <returns>The stored string instance.</returns>
        </member>
        <member name="M:Esprima.StringPool.GetHashCode(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets the (positive) hashcode for a given <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <param name="span">The input <see cref="T:System.ReadOnlySpan`1"/> instance.</param>
            <returns>The hashcode for <paramref name="span"/>.</returns>
        </member>
        <member name="F:Esprima.StringPool.Entry.Next">
            <summary>
            0-based index of next entry in chain: -1 means end of chain
            also encodes whether this entry _itself_ is part of the free list by changing sign and subtracting 3,
            so -2 means end of free list, -3 means index 0 but on free list, -4 means index 1 but on free list, etc.
            </summary>
        </member>
        <member name="P:Esprima.Utils.AstToJsonOptions.TestCompatibilityMode">
            <summary>
            This switch is intended for enabling a compatibility mode for <see cref="T:Esprima.Utils.AstToJsonConverter"/> to build a JSON output
            which matches the format of the test fixtures of the original Esprima project.
            </summary>
        </member>
        <member name="M:Esprima.Utils.ExpressionHelper.GetOperatorPrecedence(Esprima.Ast.Expression,System.Int32@)">
            <summary>
            Maps operator precedence to an integer value.
            </summary>
            <param name="expression">The expression representing the operation.</param>
            <param name="associativity">
            If less than zero, the operation has left-to-right associativity.<br/>
            If zero, associativity is not defined for the operation.<br/>
            If greater than zero, the operation has right-to-left associativity.
            </param>
            <returns>
            Precedence value as defined based on <see href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table">this table</see>. Higher value means higher precedence.
            Negative value is returned if the precedence is not defined for the specified expression. <see cref="F:System.Int32.MaxValue"/> is returned for primitive expressions like <see cref="T:Esprima.Ast.Identifier"/>.
            </returns>
        </member>
        <member name="T:Esprima.Utils.JavaScriptTextFormatter">
            <summary>
            Base class for JavaScript code formatters.
            </summary>
        </member>
        <member name="T:Esprima.Utils.JavaScriptTextWriter">
            <summary>
            Base JavaScript text writer (code formatter) which uses the most compact possible (i.e. minimal) format.
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TriviaFlags.LeadingNewLineRequired">
            <summary>
            A leading new line is required for the current trivia (i.e. it must start in a new line).
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TriviaFlags.TrailingNewLineRequired">
            <summary>
            A trailing new line is required for the current trivia (i.e. it must be followed by a new line).
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TriviaFlags.SurroundingNewLineRequired">
            <summary>
            Surrounding new lines are required for the current trivia.
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.Leading">
            <summary>
            The punctuator precedes the related token(s).
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.InBetween">
            <summary>
            The punctuator is somewhere in the middle of the related token(s). 
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.Trailing">
            <summary>
            The punctuator follows the related token(s). 
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.FollowsStatementBody">
            <summary>
            The keyword follows the body of a statement and precedes another body of the same statement (e.g. the else branch of an <see cref="T:Esprima.Ast.IfStatement"/>).
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.LeadingSpaceRecommended">
            <summary>
            A leading space is recommended for the current token (unless other white-space precedes it).
            </summary>
            <remarks>
            May or may not be respected. (It is decided by the actual <see cref="T:Esprima.Utils.JavaScriptTextWriter"/> implementation.)
            </remarks>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.TrailingSpaceRecommended">
            <summary>
            A trailing space is recommended for the current token (unless other white-space follows it).
            </summary>
            <remarks>
            May or may not be respected. (It is decided by the actual <see cref="T:Esprima.Utils.JavaScriptTextWriter"/> implementation.)
            </remarks>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.TokenFlags.SurroundingSpaceRecommended">
            <summary>
            Surrounding spaces are recommended for the current token (unless other white-spaces surround it).
            </summary>
            <remarks>
            May or may not be respected. (It is decided by the actual <see cref="T:Esprima.Utils.JavaScriptTextWriter"/> implementation.)
            </remarks>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.StatementFlags.NeedsSemicolon">
            <summary>
            The statement must be terminated with a semicolon.
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.StatementFlags.MayOmitRightMostSemicolon">
            <summary>
            If <see cref="F:Esprima.Utils.JavaScriptTextWriter.StatementFlags.NeedsSemicolon"/> is set, determines if the semicolon can be omitted when the statement comes last in the current block (see <seealso cref="F:Esprima.Utils.JavaScriptTextWriter.StatementFlags.IsRightMost"/>).
            </summary>
            <remarks>
            Automatically propagated to child statements, should be set directly only for statement list items.
            Whether the semicolon is omitted or not is decided by the actual <see cref="T:Esprima.Utils.JavaScriptTextWriter"/> implementation.
            </remarks>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.StatementFlags.IsRightMost">
            <summary>
            The statement comes last in the current statement list (more precisely, it is the right-most part in the textual representation of the current statement list).
            </summary>
            <remarks>
            In the visitation handlers of <see cref="T:Esprima.Utils.AstToJavaScriptConverter"/> the flag is interpreted differently: it indicates that the statement comes last in the parent statement.
            (Upon visiting a statement, this flag of the parent and child statement gets combined to determine its effective value for the current statement list.)
            </remarks>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.StatementFlags.IsStatementBody">
            <summary>
            The statement represents the body of another statement (e.g. the if branch of an <see cref="T:Esprima.Ast.IfStatement"/>).
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.ExpressionFlags.NeedsBrackets">
            <summary>
            The expression must be wrapped in brackets.
            </summary>
        </member>
        <member name="F:Esprima.Utils.JavaScriptTextWriter.ExpressionFlags.IsLeftMost">
            <summary>
            The expression comes first in the current expression tree, more precisely, it is the left-most part in the textual representation of the currently visited expression tree (incl. brackets).
            </summary>
            <remarks>
            In the visitation handlers of <see cref="T:Esprima.Utils.AstToJavaScriptConverter"/> the flag is interpreted differently: it indicates that the expression comes first in the parent expression.
            (Upon visiting an expression, this flag of the parent and child expression gets combined to determine its effective value for the expression tree.)
            </remarks>
        </member>
        <member name="P:Esprima.Utils.JavaScriptTextWriter.WriteContext.AssociatedData">
            <summary>
            Gets or sets the arbitrary, user-defined data object associated with the current <see cref="T:Esprima.Utils.JavaScriptTextWriter.WriteContext"/>.
            </summary>
            <remarks>
            The operation is not guaranteed to be thread-safe. In case concurrent access or update is possible, the necessary synchronization is caller's responsibility.
            </remarks>
        </member>
        <member name="T:Esprima.Utils.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only
            way of generating streams or files containing JSON Text according
            to the grammar rules laid out in
            <a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>.
            </summary>
        </member>
        <member name="M:Esprima.Utils.Jsx.JsxAstRewriter.CreateJsxRewriterFor``1(``0)">
            <summary>
            Creates an <see cref="T:Esprima.Utils.Jsx.IJsxAstVisitor"/> instance which can be used for working around multiple inheritance:
            the returned instance re-routes visitations of JSX nodes to the specified <paramref name="rewriter"/>,
            thus it can be used for emulating base class method calls.
            </summary>
        </member>
        <member name="M:Esprima.Utils.Jsx.JsxAstVisitor.CreateJsxVisitorFor``1(``0)">
            <summary>
            Creates an <see cref="T:Esprima.Utils.Jsx.IJsxAstVisitor"/> instance which can be used for working around multiple inheritance:
            the returned instance re-routes visitations of JSX nodes to the specified <paramref name="visitor"/>,
            thus it can be used for emulating base class method calls.
            </summary>
        </member>
        <member name="T:Esprima.Utils.KnRJavaScriptTextFormatter">
            <summary>
            JavaScript code formatter which implements the most commonly used <see href="https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style">K&amp;R style</see>.
            </summary>
        </member>
        <member name="P:System.HexConverter.CharToHexLookup">
            <summary>Map from an ASCII char to its hex value, e.g. arr['b'] == 11. 0xFF means it's not a hex digit.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
    </members>
</doc>
